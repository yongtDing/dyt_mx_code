C251 COMPILER V5.60.0,  STC32G_DMA                                                         19/09/23  11:04:36  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_DMA
OBJECT MODULE PLACED IN .\list\STC32G_DMA.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE STC32G_DMA.c LARGE INTR2 ROM(COMPACT) BROWSE DEBUG PRINT(.\list\STC32G
                    -_DMA.lst) TABS(2) OBJECT(.\list\STC32G_DMA.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCAI.com ---------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   10          /* --- QQ:  800003751 -------------------------------------------------*/
   11          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   12          /*---------------------------------------------------------------------*/
   13          
   14          #include "STC32G_DMA.h"
   15          #include "STC32G_UART.h"
   16          
   17          //========================================================================
   18          // 函数: void DMA_ADC_Inilize(DMA_ADC_InitTypeDef *DMA)
   19          // 描述: DMA ADC 初始化程序.
   20          // 参数: DMA: 结构参数,请参考DMA.h里的定义.
   21          // 返回: none.
   22          // 版本: V1.0, 2021-05-17
   23          //========================================================================
   24          void DMA_ADC_Inilize(DMA_ADC_InitTypeDef *DMA)
   25          {
   26   1        DMA_ADC_STA = 0x00;
   27   1        DMA_ADC_CHSW1 = (u8)(DMA->DMA_Channel>>8);
   28   1        DMA_ADC_CHSW0 = (u8)(DMA->DMA_Channel);
   29   1        DMA_ADC_RXAH = (u8)(DMA->DMA_Buffer>>8);
   30   1        DMA_ADC_RXAL = (u8)(DMA->DMA_Buffer);
   31   1        DMA_ADC_CFG2 = DMA->DMA_Times;
   32   1      
   33   1        if(DMA->DMA_Enable == ENABLE)   DMA_ADC_CR |= 0x80; //使能ADC DMA
   34   1        else DMA_ADC_CR &= ~0x80; //禁止ADC DMA
   35   1      }
   36          
   37          //========================================================================
   38          // 函数: void DMA_M2M_Inilize(DMA_M2M_InitTypeDef *DMA)
   39          // 描述: DMA M2M 初始化程序.
   40          // 参数: DMA: 结构参数,请参考DMA.h里的定义.
   41          // 返回: none.
   42          // 版本: V1.0, 2021-05-17
   43          //========================================================================
   44          void DMA_M2M_Inilize(DMA_M2M_InitTypeDef *DMA)
   45          {
   46   1        DMA_M2M_STA = 0x00;
   47   1        DMA_M2M_RXAH = (u8)(DMA->DMA_Rx_Buffer>>8);
   48   1        DMA_M2M_RXAL = (u8)(DMA->DMA_Rx_Buffer);
   49   1        DMA_M2M_TXAH = (u8)(DMA->DMA_Tx_Buffer>>8);
   50   1        DMA_M2M_TXAL = (u8)(DMA->DMA_Tx_Buffer);
   51   1        DMA_M2M_AMT = (u8)DMA->DMA_Length;        //设置传输总字节数(低8位)：n+1
   52   1        DMA_M2M_AMTH = (u8)(DMA->DMA_Length>>8);  //设置传输总字节数(高8位)：n+1
   53   1        
   54   1        if(DMA->DMA_SRC_Dir == M2M_ADDR_DEC)    DMA_M2M_CFG |= 0x20;  //数据读完后地址自减
   55   1        else DMA_M2M_CFG &= ~0x20;  //数据读完后地址自减
   56   1        if(DMA->DMA_DEST_Dir == M2M_ADDR_DEC)   DMA_M2M_CFG |= 0x10;  //数据写入后地址自减
   57   1        else DMA_M2M_CFG &= ~0x10;  //数据写入后地址自减
   58   1        
C251 COMPILER V5.60.0,  STC32G_DMA                                                         19/09/23  11:04:36  PAGE 2   

   59   1        if(DMA->DMA_Enable == ENABLE)   DMA_M2M_CR |= 0x80; //使能M2M DMA
   60   1        else DMA_M2M_CR &= ~0x80; //禁止M2M DMA
   61   1      }
   62          
   63          //========================================================================
   64          // 函数: void DMA_SPI_Inilize(DMA_SPI_InitTypeDef *DMA)
   65          // 描述: DMA SPI 初始化程序.
   66          // 参数: DMA: 结构参数,请参考DMA.h里的定义.
   67          // 返回: none.
   68          // 版本: V1.0, 2021-05-17
   69          //========================================================================
   70          void DMA_SPI_Inilize(DMA_SPI_InitTypeDef *DMA)
   71          {
   72   1        DMA_SPI_STA = 0x00;
   73   1        DMA_SPI_RXAH = (u8)(DMA->DMA_Rx_Buffer>>8);
   74   1        DMA_SPI_RXAL = (u8)(DMA->DMA_Rx_Buffer);
   75   1        DMA_SPI_TXAH = (u8)(DMA->DMA_Tx_Buffer>>8);
   76   1        DMA_SPI_TXAL = (u8)(DMA->DMA_Tx_Buffer);
   77   1        DMA_SPI_AMT = (u8)DMA->DMA_Length;        //设置传输总字节数(低8位)：n+1
   78   1        DMA_SPI_AMTH = (u8)(DMA->DMA_Length>>8);  //设置传输总字节数(高8位)：n+1
   79   1        
   80   1        if(DMA->DMA_SS_Sel <= SPI_SS_P35) DMA_SPI_CFG2 = (DMA_SPI_CFG2 & 0xfc) | DMA->DMA_SS_Sel; //自动控制SS脚
             -选择
   81   1      
   82   1        if(DMA->DMA_Tx_Enable == ENABLE)    DMA_SPI_CFG |= 0x40;  //使能SPI发送数据
   83   1        else DMA_SPI_CFG &= ~0x40;  //禁止SPI发送数据
   84   1        
   85   1        if(DMA->DMA_Rx_Enable == ENABLE)    DMA_SPI_CFG |= 0x20;  //使能SPI接收数据
   86   1        else DMA_SPI_CFG &= ~0x20;  //禁止SPI接收数据
   87   1        
   88   1        if(DMA->DMA_AUTO_SS == ENABLE)    DMA_SPI_CFG2 |= 0x04; //使能SS自动控制
   89   1        else DMA_SPI_CFG2 &= ~0x04; //禁止SS自动控制
   90   1        
   91   1        if(DMA->DMA_Enable == ENABLE)   DMA_SPI_CR |= 0x80; //使能SPI DMA
   92   1        else DMA_SPI_CR &= ~0x80; //禁止SPI DMA
   93   1      }
   94          
   95          //========================================================================
   96          // 函数: void DMA_UART_Inilize(u8 UARTx, DMA_UART_InitTypeDef *DMA)
   97          // 描述: DMA UART 初始化程序.
   98          // 参数: UARTx: UART组号, DMA: 结构参数,请参考DMA.h里的定义.
   99          // 返回: none.
  100          // 版本: V1.0, 2021-05-17
  101          //========================================================================
  102          void DMA_UART_Inilize(u8 UARTx, DMA_UART_InitTypeDef *DMA)
  103          {
  104   1      #ifdef UART1
  105   1        if(UARTx == UART1)
  106   1        {
  107   2          DMA_UR1T_STA = 0x00;
  108   2          DMA_UR1R_STA = 0x00;
  109   2          DMA_UR1T_AMT = DMA->DMA_TX_Length;
  110   2          DMA_UR1T_TXAH = (u8)(DMA->DMA_TX_Buffer>>8);
  111   2          DMA_UR1T_TXAL = (u8)(DMA->DMA_TX_Buffer);
  112   2          DMA_UR1R_RXAH = (u8)(DMA->DMA_RX_Buffer>>8);
  113   2          DMA_UR1R_RXAL = (u8)(DMA->DMA_RX_Buffer);
  114   2          DMA_UR1R_AMT = (u8)DMA->DMA_RX_Length;        //设置传输总字节数(低8位)：n+1
  115   2          DMA_UR1R_AMTH = (u8)(DMA->DMA_RX_Length>>8);  //设置传输总字节数(高8位)：n+1
  116   2      
  117   2          if(DMA->DMA_TX_Enable == ENABLE)    DMA_UR1T_CR |= 0x80;  //使能UART1 TX DMA
  118   2          else DMA_UR1T_CR &= ~0x80;  //禁止UART1 TX DMA
  119   2          if(DMA->DMA_RX_Enable == ENABLE)    DMA_UR1R_CR |= 0x80;  //使能UART1 RX DMA
  120   2          else DMA_UR1R_CR &= ~0x80;  //禁止UART1 RX DMA
  121   2        }
  122   1      #endif
  123   1      #ifdef UART2
C251 COMPILER V5.60.0,  STC32G_DMA                                                         19/09/23  11:04:36  PAGE 3   

                 if(UARTx == UART2)
                 {
                   DMA_UR2T_STA = 0x00;
                   DMA_UR2R_STA = 0x00;
                   DMA_UR2T_AMT = DMA->DMA_TX_Length;
                   DMA_UR2T_TXAH = (u8)(DMA->DMA_TX_Buffer>>8);
                   DMA_UR2T_TXAL = (u8)(DMA->DMA_TX_Buffer);
                   DMA_UR2R_RXAH = (u8)(DMA->DMA_RX_Buffer>>8);
                   DMA_UR2R_RXAL = (u8)(DMA->DMA_RX_Buffer);
                   DMA_UR2R_AMT = (u8)DMA->DMA_RX_Length;        //设置传输总字节数(低8位)：n+1
                   DMA_UR2R_AMTH = (u8)(DMA->DMA_RX_Length>>8);  //设置传输总字节数(高8位)：n+1
               
                   if(DMA->DMA_TX_Enable == ENABLE)    DMA_UR2T_CR |= 0x80;  //使能UART2 TX DMA
                   else DMA_UR2T_CR &= ~0x80;  //禁止UART2 TX DMA
                   if(DMA->DMA_RX_Enable == ENABLE)    DMA_UR2R_CR |= 0x80;  //使能UART2 RX DMA
                   else DMA_UR2R_CR &= ~0x80;  //禁止UART2 RX DMA
                 }
               #endif
  142   1      #ifdef UART3
                 if(UARTx == UART3)
                 {
                   DMA_UR3T_STA = 0x00;
                   DMA_UR3R_STA = 0x00;
                   DMA_UR3T_AMT = DMA->DMA_TX_Length;
                   DMA_UR3T_TXAH = (u8)(DMA->DMA_TX_Buffer>>8);
                   DMA_UR3T_TXAL = (u8)(DMA->DMA_TX_Buffer);
                   DMA_UR3R_RXAH = (u8)(DMA->DMA_RX_Buffer>>8);
                   DMA_UR3R_RXAL = (u8)(DMA->DMA_RX_Buffer);
                   DMA_UR3R_AMT = (u8)DMA->DMA_RX_Length;        //设置传输总字节数(低8位)：n+1
                   DMA_UR3R_AMTH = (u8)(DMA->DMA_RX_Length>>8);  //设置传输总字节数(高8位)：n+1
               
                   if(DMA->DMA_TX_Enable == ENABLE)    DMA_UR3T_CR |= 0x80;  //使能UART3 TX DMA
                   else DMA_UR3T_CR &= ~0x80;  //禁止UART3 TX DMA
                   if(DMA->DMA_RX_Enable == ENABLE)    DMA_UR3R_CR |= 0x80;  //使能UART3 RX DMA
                   else DMA_UR3R_CR &= ~0x80;  //禁止UART3 RX DMA
                 }
               #endif
  161   1      #ifdef UART4
  162   1        if(UARTx == UART4)
  163   1        {
  164   2          DMA_UR4T_STA = 0x00;
  165   2          DMA_UR4R_STA = 0x00;
  166   2          DMA_UR4T_AMT = DMA->DMA_TX_Length;
  167   2          DMA_UR4T_TXAH = (u8)(DMA->DMA_TX_Buffer>>8);
  168   2          DMA_UR4T_TXAL = (u8)(DMA->DMA_TX_Buffer);
  169   2          DMA_UR4R_RXAH = (u8)(DMA->DMA_RX_Buffer>>8);
  170   2          DMA_UR4R_RXAL = (u8)(DMA->DMA_RX_Buffer);
  171   2          DMA_UR4R_AMT = (u8)DMA->DMA_RX_Length;        //设置传输总字节数(低8位)：n+1
  172   2          DMA_UR4R_AMTH = (u8)(DMA->DMA_RX_Length>>8);  //设置传输总字节数(高8位)：n+1
  173   2      
  174   2          if(DMA->DMA_TX_Enable == ENABLE)    DMA_UR4T_CR |= 0x80;  //使能UART4 TX DMA
  175   2          else DMA_UR4T_CR &= ~0x80;  //禁止UART4 TX DMA
  176   2          if(DMA->DMA_RX_Enable == ENABLE)    DMA_UR4R_CR |= 0x80;  //使能UART4 RX DMA
  177   2          else DMA_UR4R_CR &= ~0x80;  //禁止UART4 RX DMA
  178   2        }
  179   1      #endif
  180   1      }
  181          
  182          //========================================================================
  183          // 函数: void DMA_LCM_Inilize(DMA_LCM_InitTypeDef *DMA)
  184          // 描述: DMA LCM 初始化程序.
  185          // 参数: DMA: 结构参数,请参考DMA.h里的定义.
  186          // 返回: none.
  187          // 版本: V1.0, 2021-05-17
  188          //========================================================================
  189          void DMA_LCM_Inilize(DMA_LCM_InitTypeDef *DMA)
C251 COMPILER V5.60.0,  STC32G_DMA                                                         19/09/23  11:04:36  PAGE 4   

  190          {
  191   1        DMA_LCM_STA = 0x00;
  192   1        DMA_LCM_RXAH = (u8)(DMA->DMA_Rx_Buffer>>8);
  193   1        DMA_LCM_RXAL = (u8)(DMA->DMA_Rx_Buffer);
  194   1        DMA_LCM_TXAH = (u8)(DMA->DMA_Tx_Buffer>>8);
  195   1        DMA_LCM_TXAL = (u8)(DMA->DMA_Tx_Buffer);
  196   1        DMA_LCM_AMT = (u8)DMA->DMA_Length;        //设置传输总字节数(低8位)：n+1
  197   1        DMA_LCM_AMTH = (u8)(DMA->DMA_Length>>8);  //设置传输总字节数(高8位)：n+1
  198   1        
  199   1        if(DMA->DMA_Enable == ENABLE)   DMA_LCM_CR |= 0x80; //使能LCM DMA
  200   1        else DMA_LCM_CR &= ~0x80; //禁止LCM DMA
  201   1      }
  202          
  203          //========================================================================
  204          // 函数: void DMA_I2C_Inilize(DMA_I2C_InitTypeDef *DMA)
  205          // 描述: DMA I2C 初始化程序.
  206          // 参数: DMA: 结构参数,请参考DMA.h里的定义.
  207          // 返回: none.
  208          // 版本: V1.0, 2021-05-17
  209          //========================================================================
  210          void DMA_I2C_Inilize(DMA_I2C_InitTypeDef *DMA)
  211          {
  212   1        DMA_I2CT_STA = 0x00;
  213   1        DMA_I2CT_TXAH = (u8)(DMA->DMA_TX_Buffer>>8);
  214   1        DMA_I2CT_TXAL = (u8)(DMA->DMA_TX_Buffer);
  215   1        DMA_I2CT_AMT = (u8)DMA->DMA_TX_Length;        //设置传输总字节数(低8位)：n+1
  216   1        DMA_I2CT_AMTH = (u8)(DMA->DMA_TX_Length>>8);  //设置传输总字节数(高8位)：n+1
  217   1      
  218   1        DMA_I2CR_STA = 0x00;
  219   1        DMA_I2CR_RXAH = (u8)(DMA->DMA_RX_Buffer>>8);
  220   1        DMA_I2CR_RXAL = (u8)(DMA->DMA_RX_Buffer);
  221   1        DMA_I2CR_AMT = (u8)DMA->DMA_RX_Length;        //设置传输总字节数(低8位)：n+1
  222   1        DMA_I2CR_AMTH = (u8)(DMA->DMA_RX_Length>>8);  //设置传输总字节数(高8位)：n+1
  223   1        
  224   1        if(DMA->DMA_TX_Enable == ENABLE)    DMA_I2CT_CR |= 0x80;  //使能I2CT DMA
  225   1        else DMA_I2CT_CR &= ~0x80;  //禁止I2CT DMA
  226   1        if(DMA->DMA_RX_Enable == ENABLE)    DMA_I2CR_CR |= 0x80;  //使能I2CR DMA
  227   1        else DMA_I2CR_CR &= ~0x80;  //禁止I2CT DMA
  228   1      }
  229          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1199     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
