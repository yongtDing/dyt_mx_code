C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_NVIC
OBJECT MODULE PLACED IN .\list\STC32G_NVIC.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE STC32G_NVIC.c LARGE INTR2 ROM(COMPACT) BROWSE DEBUG PRINT(.\list\STC32
                    -G_NVIC.lst) TABS(2) OBJECT(.\list\STC32G_NVIC.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCAI.com ---------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   10          /* --- QQ:  800003751 -------------------------------------------------*/
   11          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   12          /*---------------------------------------------------------------------*/
   13          
   14          #include "STC32G_NVIC.h"
   15          
   16          //========================================================================
   17          // 函数: NVIC_Timer0_Init
   18          // 描述: Timer0嵌套向量中断控制器初始化.
   19          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   20          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
   21          // 返回: 执行结果 SUCCESS/FAIL.
   22          // 版本: V1.0, 2020-09-29
   23          //========================================================================
   24          u8 NVIC_Timer0_Init(u8 State, u8 Priority)
   25          {
   26   1        if(State <= ENABLE) Timer0_Interrupt(State); else  return FAIL;
   27   1        if(Priority <= Priority_3) Timer0_Priority(Priority); else  return FAIL;
   28   1        return SUCCESS;
   29   1      }
   30          
   31          //========================================================================
   32          // 函数: NVIC_Timer1_Init
   33          // 描述: Timer1嵌套向量中断控制器初始化.
   34          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   35          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
   36          // 返回: 执行结果 SUCCESS/FAIL.
   37          // 版本: V1.0, 2020-09-29
   38          //========================================================================
   39          u8 NVIC_Timer1_Init(u8 State, u8 Priority)
   40          {
   41   1        if(State <= ENABLE) Timer1_Interrupt(State); else  return FAIL;
   42   1        if(Priority <= Priority_3) Timer1_Priority(Priority); else  return FAIL;
   43   1        return SUCCESS;
   44   1      }
   45          
   46          //========================================================================
   47          // 函数: NVIC_Timer2_Init
   48          // 描述: Timer2嵌套向量中断控制器初始化.
   49          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   50          // 参数: Priority: 中断优先级, NULL.
   51          // 返回: 执行结果 SUCCESS/FAIL.
   52          // 版本: V1.0, 2020-09-29
   53          //========================================================================
   54          u8 NVIC_Timer2_Init(u8 State, u8 Priority)
   55          {
   56   1        if(State <= ENABLE) Timer2_Interrupt(State); else  return FAIL;
   57   1        Priority = NULL;
   58   1        return SUCCESS;
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 2   

   59   1      }
   60          
   61          //========================================================================
   62          // 函数: NVIC_Timer3_Init
   63          // 描述: Timer3嵌套向量中断控制器初始化.
   64          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   65          // 参数: Priority: 中断优先级, NULL.
   66          // 返回: 执行结果 SUCCESS/FAIL.
   67          // 版本: V1.0, 2020-09-29
   68          //========================================================================
   69          u8 NVIC_Timer3_Init(u8 State, u8 Priority)
   70          {
   71   1        if(State <= ENABLE) Timer3_Interrupt(State); else  return FAIL;
   72   1        Priority = NULL;
   73   1        return SUCCESS;
   74   1      }
   75          
   76          //========================================================================
   77          // 函数: NVIC_Timer4_Init
   78          // 描述: Timer4嵌套向量中断控制器初始化.
   79          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   80          // 参数: Priority: 中断优先级, NULL.
   81          // 返回: 执行结果 SUCCESS/FAIL.
   82          // 版本: V1.0, 2020-09-29
   83          //========================================================================
   84          u8 NVIC_Timer4_Init(u8 State, u8 Priority)
   85          {
   86   1        if(State <= ENABLE) Timer4_Interrupt(State); else  return FAIL;
   87   1        Priority = NULL;
   88   1        return SUCCESS;
   89   1      }
   90          
   91          //========================================================================
   92          // 函数: NVIC_INT0_Init
   93          // 描述: INT0嵌套向量中断控制器初始化.
   94          // 参数: State:    中断使能状态, ENABLE/DISABLE.
   95          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
   96          // 返回: 执行结果 SUCCESS/FAIL.
   97          // 版本: V1.0, 2020-09-29
   98          //========================================================================
   99          u8 NVIC_INT0_Init(u8 State, u8 Priority)
  100          {
  101   1        if(State <= ENABLE) INT0_Interrupt(State); else  return FAIL;
  102   1        if(Priority <= Priority_3) INT0_Priority(Priority); else  return FAIL;
  103   1        return SUCCESS;
  104   1      }
  105          
  106          //========================================================================
  107          // 函数: NVIC_INT1_Init
  108          // 描述: INT1嵌套向量中断控制器初始化.
  109          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  110          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  111          // 返回: 执行结果 SUCCESS/FAIL.
  112          // 版本: V1.0, 2020-09-29
  113          //========================================================================
  114          u8 NVIC_INT1_Init(u8 State, u8 Priority)
  115          {
  116   1        if(State <= ENABLE) INT1_Interrupt(State); else  return FAIL;
  117   1        if(Priority <= Priority_3) INT1_Priority(Priority); else  return FAIL;
  118   1        return SUCCESS;
  119   1      }
  120          
  121          //========================================================================
  122          // 函数: NVIC_INT2_Init
  123          // 描述: INT2嵌套向量中断控制器初始化.
  124          // 参数: State:    中断使能状态, ENABLE/DISABLE.
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 3   

  125          // 参数: Priority: 中断优先级, NULL.
  126          // 返回: 执行结果 SUCCESS/FAIL.
  127          // 版本: V1.0, 2020-09-29
  128          //========================================================================
  129          u8 NVIC_INT2_Init(u8 State, u8 Priority)
  130          {
  131   1        if(State <= ENABLE) INT2_Interrupt(State); else  return FAIL;
  132   1        Priority = NULL;
  133   1        return SUCCESS;
  134   1      }
  135          
  136          //========================================================================
  137          // 函数: NVIC_INT3_Init
  138          // 描述: INT3嵌套向量中断控制器初始化.
  139          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  140          // 参数: Priority: 中断优先级, NULL.
  141          // 返回: 执行结果 SUCCESS/FAIL.
  142          // 版本: V1.0, 2020-09-29
  143          //========================================================================
  144          u8 NVIC_INT3_Init(u8 State, u8 Priority)
  145          {
  146   1        if(State <= ENABLE) INT3_Interrupt(State); else  return FAIL;
  147   1        Priority = NULL;
  148   1        return SUCCESS;
  149   1      }
  150          
  151          //========================================================================
  152          // 函数: NVIC_INT4_Init
  153          // 描述: INT4嵌套向量中断控制器初始化.
  154          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  155          // 参数: Priority: 中断优先级, NULL.
  156          // 返回: 执行结果 SUCCESS/FAIL.
  157          // 版本: V1.0, 2020-09-29
  158          //========================================================================
  159          u8 NVIC_INT4_Init(u8 State, u8 Priority)
  160          {
  161   1        if(State <= ENABLE) INT4_Interrupt(State); else  return FAIL;
  162   1        Priority = NULL;
  163   1        return SUCCESS;
  164   1      }
  165          
  166          //========================================================================
  167          // 函数: NVIC_ADC_Init
  168          // 描述: ADC嵌套向量中断控制器初始化.
  169          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  170          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  171          // 返回: 执行结果 SUCCESS/FAIL.
  172          // 版本: V1.0, 2020-09-29
  173          //========================================================================
  174          u8 NVIC_ADC_Init(u8 State, u8 Priority)
  175          {
  176   1        if(State <= ENABLE) ADC_Interrupt(State); else  return FAIL;
  177   1        if(Priority <= Priority_3) ADC_Priority(Priority); else  return FAIL;
  178   1        return SUCCESS;
  179   1      }
  180          
  181          //========================================================================
  182          // 函数: NVIC_CMP_Init
  183          // 描述: 比较器嵌套向量中断控制器初始化.
  184          // 参数: State:    中断使能状态, RISING_EDGE/FALLING_EDGE/DISABLE.
  185          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  186          // 返回: 执行结果 SUCCESS/FAIL.
  187          // 版本: V1.0, 2020-09-29
  188          //========================================================================
  189          u8 NVIC_CMP_Init(u8 State, u8 Priority)
  190          {
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 4   

  191   1        if(State & RISING_EDGE) PIE = 1;      //允许上升沿中断
  192   1        else  PIE = 0;      //禁止上升沿中断
  193   1        if(State & FALLING_EDGE)  NIE = 1;    //允许下降沿中断
  194   1        else  NIE = 0;      //禁止上升沿中断
  195   1        if(Priority <= Priority_3) CMP_Priority(Priority); else  return FAIL;
  196   1        return SUCCESS;
  197   1      }
  198          
  199          //========================================================================
  200          // 函数: NVIC_I2C_Init
  201          // 描述: I2C嵌套向量中断控制器初始化.
  202          // 参数: Mode:     模式, I2C_Mode_Master/I2C_Mode_Slave.
  203          // 参数: State:    中断使能状态, I2C_Mode_Master: ENABLE/DISABLE.
  204          //                              I2C_Mode_Slave: I2C_ESTAI/I2C_ERXI/I2C_ETXI/I2C_ESTOI/DISABLE.
  205          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  206          // 返回: 执行结果 SUCCESS/FAIL.
  207          // 版本: V1.0, 2020-09-29
  208          //========================================================================
  209          u8 NVIC_I2C_Init(u8 Mode, u8 State, u8 Priority)
  210          {
  211   1        if(Mode > 1) return FAIL;
  212   1        if(Mode == 1) //I2C_Mode_Master
  213   1        {
  214   2          I2C_Master_Inturrupt(State);
  215   2        }
  216   1        else if(Mode == 0)  //I2C_Mode_Slave
  217   1        {
  218   2          I2CSLCR = (I2CSLCR & ~0x78) | State;
  219   2        }
  220   1        if(Priority <= Priority_3) CMP_Priority(Priority); else  return FAIL;
  221   1        return SUCCESS;
  222   1      }
  223          
  224          //========================================================================
  225          // 函数: NVIC_UART1_Init
  226          // 描述: UART1嵌套向量中断控制器初始化.
  227          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  228          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  229          // 返回: 执行结果 SUCCESS/FAIL.
  230          // 版本: V1.0, 2020-09-29
  231          //========================================================================
  232          u8 NVIC_UART1_Init(u8 State, u8 Priority)
  233          {
  234   1        if(State <= ENABLE) UART1_Interrupt(State); else  return FAIL;
  235   1        if(Priority <= Priority_3) UART1_Priority(Priority); else  return FAIL;
  236   1        return SUCCESS;
  237   1      }
  238          
  239          //========================================================================
  240          // 函数: NVIC_UART2_Init
  241          // 描述: UART2嵌套向量中断控制器初始化.
  242          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  243          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  244          // 返回: 执行结果 SUCCESS/FAIL.
  245          // 版本: V1.0, 2020-09-29
  246          //========================================================================
  247          u8 NVIC_UART2_Init(u8 State, u8 Priority)
  248          {
  249   1        if(State <= ENABLE) UART2_Interrupt(State); else  return FAIL;
  250   1        if(Priority <= Priority_3) UART2_Priority(Priority); else  return FAIL;
  251   1        return SUCCESS;
  252   1      }
  253          
  254          //========================================================================
  255          // 函数: NVIC_UART3_Init
  256          // 描述: UART3嵌套向量中断控制器初始化.
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 5   

  257          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  258          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  259          // 返回: 执行结果 SUCCESS/FAIL.
  260          // 版本: V1.0, 2020-09-29
  261          //========================================================================
  262          u8 NVIC_UART3_Init(u8 State, u8 Priority)
  263          {
  264   1        if(State <= ENABLE) UART3_Interrupt(State); else  return FAIL;
  265   1        if(Priority <= Priority_3) UART3_Priority(Priority); else  return FAIL;
  266   1        return SUCCESS;
  267   1      }
  268          
  269          //========================================================================
  270          // 函数: NVIC_UART4_Init
  271          // 描述: UART4嵌套向量中断控制器初始化.
  272          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  273          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  274          // 返回: 执行结果 SUCCESS/FAIL.
  275          // 版本: V1.0, 2020-09-29
  276          //========================================================================
  277          u8 NVIC_UART4_Init(u8 State, u8 Priority)
  278          {
  279   1        if(State <= ENABLE) UART4_Interrupt(State); else  return FAIL;
  280   1        if(Priority <= Priority_3) UART4_Priority(Priority); else  return FAIL;
  281   1        return SUCCESS;
  282   1      }
  283          
  284          //========================================================================
  285          // 函数: NVIC_SPI_Init
  286          // 描述: SPI嵌套向量中断控制器初始化.
  287          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  288          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  289          // 返回: 执行结果 SUCCESS/FAIL.
  290          // 版本: V1.0, 2020-09-29
  291          //========================================================================
  292          u8 NVIC_SPI_Init(u8 State, u8 Priority)
  293          {
  294   1        if(State <= ENABLE) SPI_Interrupt(State); else  return FAIL;
  295   1        if(Priority <= Priority_3) SPI_Priority(Priority); else  return FAIL;
  296   1        return SUCCESS;
  297   1      }
  298          
  299          //========================================================================
  300          // 函数: NVIC_RTC_Init
  301          // 描述: SPI嵌套向量中断控制器初始化.
  302          // 参数: State:    中断使能状态, 中断使能, 0x80:闹钟中断, 0x40:日中断, 0x20:小时中断, 0x10:分钟中断, 0x08
             -:秒中断, 0x04:1/2秒中断, 0x02:1/8秒中断, 0x01:1/32秒中断 /DISABLE.
  303          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  304          // 返回: 执行结果 SUCCESS/FAIL.
  305          // 版本: V1.0, 2020-09-29
  306          //========================================================================
  307          u8 NVIC_RTC_Init(u8 State, u8 Priority)
  308          {
  309   1        if(Priority <= Priority_3) RTC_Priority(Priority); else  return FAIL;
  310   1        RTC_Interrupt(State); 
  311   1        return SUCCESS;
  312   1      }
  313          
  314          //========================================================================
  315          // 函数: NVIC_PWM_Init
  316          // 描述: PWM嵌套向量中断控制器初始化.
  317          // 参数: Channel:  通道, PWMA/PWMB.
  318          // 参数: State:    中断使能状态, PWM_BIE/PWM_TIE/PWM_COMIE/PWM_CC8IE~PWM_CC1IE/PWM_UIE/DISABLE.
  319          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  320          // 返回: 执行结果 SUCCESS/FAIL.
  321          // 版本: V1.0, 2020-09-29
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 6   

  322          //========================================================================
  323          #ifndef PWMA
  324          #define PWMA  9
  325          #endif
  326          #ifndef PWMB
  327          #define PWMB  10
  328          #endif
  329          u8 NVIC_PWM_Init(u8 Channel, u8 State, u8 Priority)
  330          {
  331   1        if(Channel > PWMB) return FAIL;
  332   1        if(Priority > Priority_3) return FAIL;
  333   1        switch(Channel)
  334   1        {
  335   2          case PWMA:
  336   2            PWMA_IER = State;
  337   2            PWMA_Priority(Priority);
  338   2          break;
  339   2      
  340   2          case PWMB:
  341   2            PWMB_IER = State;
  342   2            PWMB_Priority(Priority);
  343   2          break;
  344   2      
  345   2          default:
  346   2            PWMB_IER = State;
  347   2            Priority = NULL;
  348   2          break;
  349   2        }
  350   1        return SUCCESS;
  351   1      }
  352          
  353          //========================================================================
  354          // 函数: NVIC_DMA_ADC_Init
  355          // 描述: DMA ADC嵌套向量中断控制器初始化.
  356          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  357          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  358          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  359          // 返回: 执行结果 SUCCESS/FAIL.
  360          // 版本: V1.0, 2021-05-21
  361          //========================================================================
  362          u8 NVIC_DMA_ADC_Init(u8 State, u8 Priority, u8 Bus_Priority)
  363          {
  364   1        DMA_ADC_CFG &= ~0x0f;
  365   1        if(Priority <= Priority_3) DMA_ADC_CFG |= Priority << 2;
  366   1        if(Bus_Priority <= Priority_3) DMA_ADC_CFG |= Bus_Priority; //数据总线访问优先级
  367   1        if(State == ENABLE)
  368   1          DMA_ADC_CFG |= 0x80;    //bit7 1:Enable Interrupt
  369   1        else
  370   1          DMA_ADC_CFG &= ~0x80;   //bit7 0:Disable Interrupt
  371   1        return SUCCESS;
  372   1      }
  373          
  374          //========================================================================
  375          // 函数: NVIC_DMA_M2M_Init
  376          // 描述: DMA M2M嵌套向量中断控制器初始化.
  377          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  378          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  379          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  380          // 返回: 执行结果 SUCCESS/FAIL.
  381          // 版本: V1.0, 2021-05-21
  382          //========================================================================
  383          u8 NVIC_DMA_M2M_Init(u8 State, u8 Priority, u8 Bus_Priority)
  384          {
  385   1        DMA_M2M_CFG &= ~0x0f;
  386   1        if(Priority <= Priority_3) DMA_M2M_CFG |= Priority << 2;
  387   1        if(Bus_Priority <= Priority_3) DMA_M2M_CFG |= Bus_Priority; //数据总线访问优先级
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 7   

  388   1        if(State == ENABLE)
  389   1          DMA_M2M_CFG |= 0x80;    //bit7 1:Enable Interrupt
  390   1        else
  391   1          DMA_M2M_CFG &= ~0x80;   //bit7 0:Disable Interrupt
  392   1        return SUCCESS;
  393   1      }
  394          
  395          //========================================================================
  396          // 函数: NVIC_DMA_SPI_Init
  397          // 描述: DMA SPI嵌套向量中断控制器初始化.
  398          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  399          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  400          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  401          // 返回: 执行结果 SUCCESS/FAIL.
  402          // 版本: V1.0, 2021-05-27
  403          //========================================================================
  404          u8 NVIC_DMA_SPI_Init(u8 State, u8 Priority, u8 Bus_Priority)
  405          {
  406   1        DMA_SPI_CFG &= ~0x0f;
  407   1        if(Priority <= Priority_3) DMA_SPI_CFG |= Priority << 2;
  408   1        if(Bus_Priority <= Priority_3) DMA_SPI_CFG |= Bus_Priority; //数据总线访问优先级
  409   1        if(State == ENABLE)
  410   1          DMA_SPI_CFG |= 0x80;    //bit7 1:Enable Interrupt
  411   1        else
  412   1          DMA_SPI_CFG &= ~0x80;   //bit7 0:Disable Interrupt
  413   1        return SUCCESS;
  414   1      }
  415          
  416          //========================================================================
  417          // 函数: NVIC_DMA_UART1_Tx_Init
  418          // 描述: DMA UART1 Tx嵌套向量中断控制器初始化.
  419          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  420          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  421          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  422          // 返回: 执行结果 SUCCESS/FAIL.
  423          // 版本: V1.0, 2021-05-21
  424          //========================================================================
  425          u8 NVIC_DMA_UART1_Tx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  426          {
  427   1        DMA_UR1T_CFG &= ~0x0f;
  428   1        if(Priority <= Priority_3) DMA_UR1T_CFG |= Priority << 2;
  429   1        if(Bus_Priority <= Priority_3) DMA_UR1T_CFG |= Bus_Priority;  //数据总线访问优先级
  430   1        if(State == ENABLE)
  431   1          DMA_UR1T_CFG |= 0x80;   //bit7 1:Enable Interrupt
  432   1        else
  433   1          DMA_UR1T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  434   1        return SUCCESS;
  435   1      }
  436          
  437          //========================================================================
  438          // 函数: NVIC_DMA_UART1_Rx_Init
  439          // 描述: DMA UART1 Rx嵌套向量中断控制器初始化.
  440          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  441          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  442          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  443          // 返回: 执行结果 SUCCESS/FAIL.
  444          // 版本: V1.0, 2021-05-21
  445          //========================================================================
  446          u8 NVIC_DMA_UART1_Rx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  447          {
  448   1        DMA_UR1R_CFG &= ~0x0f;
  449   1        if(Priority <= Priority_3) DMA_UR1R_CFG |= Priority << 2;
  450   1        if(Bus_Priority <= Priority_3) DMA_UR1R_CFG |= Bus_Priority;  //数据总线访问优先级
  451   1        if(State == ENABLE)
  452   1          DMA_UR1R_CFG |= 0x80;   //bit7 1:Enable Interrupt
  453   1        else
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 8   

  454   1          DMA_UR1R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  455   1        return SUCCESS;
  456   1      }
  457          
  458          //========================================================================
  459          // 函数: NVIC_DMA_UART2_Tx_Init
  460          // 描述: DMA UART2 Tx嵌套向量中断控制器初始化.
  461          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  462          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  463          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  464          // 返回: 执行结果 SUCCESS/FAIL.
  465          // 版本: V1.0, 2021-05-21
  466          //========================================================================
  467          u8 NVIC_DMA_UART2_Tx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  468          {
  469   1        DMA_UR2T_CFG &= ~0x0f;
  470   1        if(Priority <= Priority_3) DMA_UR2T_CFG |= Priority << 2;
  471   1        if(Bus_Priority <= Priority_3) DMA_UR2T_CFG |= Bus_Priority;  //数据总线访问优先级
  472   1        if(State == ENABLE)
  473   1          DMA_UR2T_CFG |= 0x80;   //bit7 1:Enable Interrupt
  474   1        else
  475   1          DMA_UR2T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  476   1        return SUCCESS;
  477   1      }
  478          
  479          //========================================================================
  480          // 函数: NVIC_DMA_UART2_Rx_Init
  481          // 描述: DMA UART2 Rx嵌套向量中断控制器初始化.
  482          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  483          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  484          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  485          // 返回: 执行结果 SUCCESS/FAIL.
  486          // 版本: V1.0, 2021-05-21
  487          //========================================================================
  488          u8 NVIC_DMA_UART2_Rx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  489          {
  490   1        DMA_UR2R_CFG &= ~0x0f;
  491   1        if(Priority <= Priority_3) DMA_UR2R_CFG |= Priority << 2;
  492   1        if(Bus_Priority <= Priority_3) DMA_UR2R_CFG |= Bus_Priority;  //数据总线访问优先级
  493   1        if(State == ENABLE)
  494   1          DMA_UR2R_CFG |= 0x80;   //bit7 1:Enable Interrupt
  495   1        else
  496   1          DMA_UR2R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  497   1        return SUCCESS;
  498   1      }
  499          
  500          //========================================================================
  501          // 函数: NVIC_DMA_UART3_Tx_Init
  502          // 描述: DMA UART3 Tx嵌套向量中断控制器初始化.
  503          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  504          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  505          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  506          // 返回: 执行结果 SUCCESS/FAIL.
  507          // 版本: V1.0, 2021-05-21
  508          //========================================================================
  509          u8 NVIC_DMA_UART3_Tx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  510          {
  511   1        DMA_UR3T_CFG &= ~0x0f;
  512   1        if(Priority <= Priority_3) DMA_UR3T_CFG |= Priority << 2;
  513   1        if(Bus_Priority <= Priority_3) DMA_UR3T_CFG |= Bus_Priority;  //数据总线访问优先级
  514   1        if(State == ENABLE)
  515   1          DMA_UR3T_CFG |= 0x80;   //bit7 1:Enable Interrupt
  516   1        else
  517   1          DMA_UR3T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  518   1        return SUCCESS;
  519   1      }
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 9   

  520          
  521          //========================================================================
  522          // 函数: NVIC_DMA_UART3_Rx_Init
  523          // 描述: DMA UART3 Rx嵌套向量中断控制器初始化.
  524          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  525          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  526          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  527          // 返回: 执行结果 SUCCESS/FAIL.
  528          // 版本: V1.0, 2021-05-21
  529          //========================================================================
  530          u8 NVIC_DMA_UART3_Rx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  531          {
  532   1        DMA_UR3R_CFG &= ~0x0f;
  533   1        if(Priority <= Priority_3) DMA_UR3R_CFG |= Priority << 2;
  534   1        if(Bus_Priority <= Priority_3) DMA_UR3R_CFG |= Bus_Priority;  //数据总线访问优先级
  535   1        if(State == ENABLE)
  536   1          DMA_UR3R_CFG |= 0x80;   //bit7 1:Enable Interrupt
  537   1        else
  538   1          DMA_UR3R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  539   1        return SUCCESS;
  540   1      }
  541          
  542          //========================================================================
  543          // 函数: NVIC_DMA_UART4_Tx_Init
  544          // 描述: DMA UART4 Tx嵌套向量中断控制器初始化.
  545          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  546          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  547          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  548          // 返回: 执行结果 SUCCESS/FAIL.
  549          // 版本: V1.0, 2021-05-21
  550          //========================================================================
  551          u8 NVIC_DMA_UART4_Tx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  552          {
  553   1        DMA_UR4T_CFG &= ~0x0f;
  554   1        if(Priority <= Priority_3) DMA_UR4T_CFG |= Priority << 2;
  555   1        if(Bus_Priority <= Priority_3) DMA_UR4T_CFG |= Bus_Priority;  //数据总线访问优先级
  556   1        if(State == ENABLE)
  557   1          DMA_UR4T_CFG |= 0x80;   //bit7 1:Enable Interrupt
  558   1        else
  559   1          DMA_UR4T_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  560   1        return SUCCESS;
  561   1      }
  562          
  563          //========================================================================
  564          // 函数: NVIC_DMA_UART4_Rx_Init
  565          // 描述: DMA UART4 Rx嵌套向量中断控制器初始化.
  566          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  567          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  568          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  569          // 返回: 执行结果 SUCCESS/FAIL.
  570          // 版本: V1.0, 2021-05-21
  571          //========================================================================
  572          u8 NVIC_DMA_UART4_Rx_Init(u8 State, u8 Priority, u8 Bus_Priority)
  573          {
  574   1        DMA_UR4R_CFG &= ~0x0f;
  575   1        if(Priority <= Priority_3) DMA_UR4R_CFG |= Priority << 2;
  576   1        if(Bus_Priority <= Priority_3) DMA_UR4R_CFG |= Bus_Priority;  //数据总线访问优先级
  577   1        if(State == ENABLE)
  578   1          DMA_UR4R_CFG |= 0x80;   //bit7 1:Enable Interrupt
  579   1        else
  580   1          DMA_UR4R_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  581   1        return SUCCESS;
  582   1      }
  583          
  584          //========================================================================
  585          // 函数: NVIC_DMA_LCM_Init
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 10  

  586          // 描述: DMA LCM嵌套向量中断控制器初始化.
  587          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  588          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  589          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  590          // 返回: 执行结果 SUCCESS/FAIL.
  591          // 版本: V1.0, 2021-05-21
  592          //========================================================================
  593          u8 NVIC_DMA_LCM_Init(u8 State, u8 Priority, u8 Bus_Priority)
  594          {
  595   1        DMA_LCM_CFG &= ~0x0f;
  596   1        if(Priority <= Priority_3) DMA_LCM_CFG |= Priority << 2;
  597   1        if(Bus_Priority <= Priority_3) DMA_LCM_CFG |= Bus_Priority; //数据总线访问优先级
  598   1        if(State == ENABLE)
  599   1          DMA_LCM_CFG |= 0x80;    //bit7 1:Enable Interrupt
  600   1        else
  601   1          DMA_LCM_CFG &= ~0x80;   //bit7 0:Disable Interrupt
  602   1        return SUCCESS;
  603   1      }
  604          
  605          //========================================================================
  606          // 函数: NVIC_LCM_Init
  607          // 描述: LCM嵌套向量中断控制器初始化.
  608          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  609          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  610          // 返回: 执行结果 SUCCESS/FAIL.
  611          // 版本: V1.0, 2021-05-21
  612          //========================================================================
  613          u8 NVIC_LCM_Init(u8 State, u8 Priority)
  614          {
  615   1        LCMIFCFG &= ~0x30;
  616   1        if(Priority <= Priority_3) LCMIFCFG |= Priority << 4;
  617   1        if(State == ENABLE)
  618   1          LCMIFCFG |= 0x80;   //bit7 1:Enable Interrupt
  619   1        else
  620   1          LCMIFCFG &= ~0x80;    //bit7 0:Disable Interrupt
  621   1        return SUCCESS;
  622   1      }
  623          
  624          //========================================================================
  625          // 函数: NVIC_DMA_I2CT_Init
  626          // 描述: DMA I2C Tx嵌套向量中断控制器初始化.
  627          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  628          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  629          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  630          // 返回: 执行结果 SUCCESS/FAIL.
  631          // 版本: V1.0, 2022-03-25
  632          //========================================================================
  633          u8 NVIC_DMA_I2CT_Init(u8 State, u8 Priority, u8 Bus_Priority)
  634          {
  635   1        DMA_I2CT_CFG &= ~0x0f;
  636   1        if(Priority <= Priority_3) DMA_I2CT_CFG |= Priority << 2;
  637   1        if(Bus_Priority <= Priority_3) DMA_I2CT_CFG |= Bus_Priority;  //数据总线访问优先级
  638   1        if(State == ENABLE)
  639   1          DMA_I2CT_CFG |= 0x80;   //bit7 1:Enable Interrupt
  640   1        else
  641   1          DMA_I2CT_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  642   1        return SUCCESS;
  643   1      }
  644          
  645          //========================================================================
  646          // 函数: NVIC_DMA_I2CR_Init
  647          // 描述: DMA I2C Rx嵌套向量中断控制器初始化.
  648          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  649          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  650          // 参数: Bus_Priority: 数据总线访问优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  651          // 返回: 执行结果 SUCCESS/FAIL.
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 11  

  652          // 版本: V1.0, 2022-03-25
  653          //========================================================================
  654          u8 NVIC_DMA_I2CR_Init(u8 State, u8 Priority, u8 Bus_Priority)
  655          {
  656   1        DMA_I2CR_CFG &= ~0x0f;
  657   1        if(Priority <= Priority_3) DMA_I2CR_CFG |= Priority << 2;
  658   1        if(Bus_Priority <= Priority_3) DMA_I2CR_CFG |= Bus_Priority;  //数据总线访问优先级
  659   1        if(State == ENABLE)
  660   1          DMA_I2CR_CFG |= 0x80;   //bit7 1:Enable Interrupt
  661   1        else
  662   1          DMA_I2CR_CFG &= ~0x80;  //bit7 0:Disable Interrupt
  663   1        return SUCCESS;
  664   1      }
  665          
  666          //========================================================================
  667          // 函数: NVIC_CAN_Init
  668          // 描述: CAN嵌套向量中断控制器初始化.
  669          // 参数: Channel:  通道, CAN1/CAN2.
  670          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  671          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  672          // 返回: 执行结果 SUCCESS/FAIL.
  673          // 版本: V1.0, 2023-03-27
  674          //========================================================================
  675          #ifndef CAN1
  676          #define CAN1  0
  677          #endif
  678          #ifndef CAN2
  679          #define CAN2  1
  680          #endif
  681          u8 NVIC_CAN_Init(u8 Channel, u8 State, u8 Priority)
  682          {
  683   1        if(Channel > CAN2) return FAIL;
  684   1        if(Priority > Priority_3) return FAIL;
  685   1        switch(Channel)
  686   1        {
  687   2          case CAN1:
  688   2            if(State == ENABLE)
  689   2              CANIE = 1;    //bit7 1:Enable Interrupt
  690   2            else
  691   2              CANIE = 0;    //bit7 0:Disable Interrupt
  692   2            CAN1_Priority(Priority);
  693   2          break;
  694   2      
  695   2          case CAN2:
  696   2            if(State == ENABLE)
  697   2              CAN2IE = 1;   //bit7 1:Enable Interrupt
  698   2            else
  699   2              CAN2IE = 0;   //bit7 0:Disable Interrupt
  700   2            CAN2_Priority(Priority);
  701   2          break;
  702   2      
  703   2          default:
  704   2            return FAIL;
  705   2          break;
  706   2        }
  707   1        return SUCCESS;
  708   1      }
  709          
  710          //========================================================================
  711          // 函数: NVIC_LIN_Init
  712          // 描述: LIN嵌套向量中断控制器初始化.
  713          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  714          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
  715          // 返回: 执行结果 SUCCESS/FAIL.
  716          // 版本: V1.0, 2020-09-29
  717          //========================================================================
C251 COMPILER V5.60.0,  STC32G_NVIC                                                        19/09/23  11:04:36  PAGE 12  

  718          u8 NVIC_LIN_Init(u8 State, u8 Priority)
  719          {
  720   1        if(State <= ENABLE) LIN_Interrupt(State); else  return FAIL;
  721   1        if(Priority <= Priority_3) LIN_Priority(Priority); else  return FAIL;
  722   1        return SUCCESS;
  723   1      }
  724          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2669     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
